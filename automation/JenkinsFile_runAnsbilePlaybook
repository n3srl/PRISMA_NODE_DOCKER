node('docker') {
    // Parameters
    def ANSIBLE_PLAYBOOK_FILE = 'ansible/guest_node_update_freeture.yaml'
    def ANSIBLE_INVENTORY = 'ansible/inventory.ini'
	
	// Load the content of the openvpn.conf file from the secret file parameter
	withCredentials([file(credentialsId: 'PRISMA_GUEST_OPENVPN_CONF', variable: 'OPENVPN_CONF_FILE')]) {
		OPENVPN_CONF_CONTENT = readFile OPENVPN_CONF_FILE
	}
    // Credentials
    def ANSIBLE_USER = params.ANSIBLE_USER

    // Stage 1: Pull Ansible Docker Image
    stage('Pull Ansible Docker Image') {
        script {
            docker.image('webdevops/ansible').pull()
        }
    }
	
	 // Stage 2: Run OpenVPN
    stage('Run OpenVPN') {
        withCredentials([usernamePassword(credentialsId: 'PRISMA_GUEST_OPENVPN_CREDENTIALS', passwordVariable: 'OPENVPN_PASSWORD', usernameVariable: 'OPENVPN_USERNAME')]) {
            // Using the Docker Pipeline plugin to run OpenVPN inside the Docker container
            docker.image('webdevops/ansible').inside("-v \"${WORKSPACE}:/ansible\" -u root:root \"") {
                // Set the OpenVPN credentials as environment variables
                withEnv(["OPENVPN_USERNAME=${OPENVPN_USERNAME}", "OPENVPN_PASSWORD=${OPENVPN_PASSWORD}"]) {
                    
					// Write the OpenVPN configuration file
					sh """
					apk add openvpn
					
					if [ ! -d "/etc/openvpn" ]; then
					mkdir /etc/openvpn
					fi
					
					"""

                    sh """
					cat << '#DELIMITER' > /etc/openvpn/openvpn.conf
					${OPENVPN_CONF_CONTENT}
					#DELIMITER
					"""

                    // Start OpenVPN
                    sh "openvpn --config /etc/openvpn/openvpn.conf"
                }
            }
        }
    }


    // Stage 2: Run Ansible Playbook
    stage('Run Ansible Playbook') {
        withCredentials([usernamePassword(credentialsId: 'ANSIBLE_USER', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')])
		{
            // Using the Docker Pipeline plugin to run the playbook inside the Docker container
            docker.image('webdevops/ansible').inside("-v \"${WORKSPACE}:/ansible\" -u root:root \"") {
			
				// Make sure the playbook path is correct relative to the mounted volume
				sh """			
					
					ls /
					ls /ansible
					ansible-playbook -i ${ANSIBLE_INVENTORY}  ${ANSIBLE_PLAYBOOK_FILE}
				"""
            }
        }
    }
}