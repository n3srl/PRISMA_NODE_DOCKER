node('docker') {
    // Parameters
    def ANSIBLE_PLAYBOOK_FILE = 'ansible/guest_node_update_freeture.yaml'
    def ANSIBLE_INVENTORY = 'ansible/inventory.ini'
	
	// Load the content of the openvpn.conf file from the secret file parameter
	withCredentials([file(credentialsId: 'PRISMA_GUEST_OPENVPN_CONF', variable: 'OPENVPN_CONF_FILE')]) {
		OPENVPN_CONF_CONTENT = readFile OPENVPN_CONF_FILE
	}
    // Credentials
    def ANSIBLE_USER = params.ANSIBLE_USER

    // Stage 1: Pull Ansible Docker Image
    stage('Pull Ansible Docker Image') {
        script {
            docker.image('alpinelinux/ansible').pull()
        }
    }

    // Stage 2: Run Ansible Playbook
    stage('Run Ansible Playbook') {
        withCredentials([usernamePassword(credentialsId: 'ANSIBLE_USER', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')])
		{
            // Using the Docker Pipeline plugin to run the playbook inside the Docker container
            docker.image('alpinelinux/ansible').inside("-v \"${WORKSPACE}:/ansible\" -u root:root \"") {
				// Make sure the playbook path is correct relative to the mounted volume
                sh """
					mkdir /etc/openvpn
					
				    echo "${OPENVPN_CONF_CONTENT}" /etc/openvpn/openvpn.conf
					apk add openvpn
					echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.d/ipv4.conf
					sysctl -p /etc/sysctl.d/ipv4.conf
					openvpn --config /etc/openvpn/openvpn.conf
					ls /
					ls /ansible
					ansible-playbook -i ${ANSIBLE_INVENTORY}  ${ANSIBLE_PLAYBOOK_FILE}
				"""
            }
        }
    }
}