node('docker') {
    // Parameters
    def ANSIBLE_PLAYBOOK_FILE = 'ansible/guest_node_update_freeture.yaml'
    def ANSIBLE_INVENTORY = 'ansible/inventory.ini'
	
	
	// Load the content of the openvpn.conf file from the secret file parameter
	withCredentials([file(credentialsId: 'PRISMA_GUEST_OPENVPN_CONF', variable: 'OPENVPN_CONF_FILE')]) {
		OPENVPN_CONF_CONTENT = readFile OPENVPN_CONF_FILE
	}
    // Credentials
    def ANSIBLE_USER = params.ANSIBLE_USER


	checkout scm // Checkout from SCM
				
    def docker_image = docker.image('n3srl/vpnansible:latest')
	
	try {
        docker_image.pull()
    } catch (Exception e) {
        // Log error and abort if image pull fails
        println "Failed to pull Docker image: ${e.message}"
        error "Failed to pull Docker image"
    }
	
	 // Stage 2: Run OpenVPN, Run Ansible Playbook
    stage('Install & Run OpenVPN & Ansible') 
	{
        withCredentials([usernamePassword(credentialsId: 'ANSIBLE_USER', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
			
            // Using the Docker Pipeline plugin to run OpenVPN inside the Docker container
            docker_image.inside("-v \"${WORKSPACE}:/ansible\" -u root:root --device=/dev/net/tun --cap-add=NET_ADMIN  --network host\"") {
                    sh """
					sudo cat << '#DELIMITER' > /etc/openvpn/client/n3guest.conf
					${OPENVPN_CONF_CONTENT}
					#DELIMITER
					"""
					
					sh """
					ln -s /lib/systemd/system/openvpn-client@.service /etc/systemd/system/openvpn-client@n3guest.service
					systemctl enable openvpn-client@n3guest
					systemctl start openvpn-client@n3guest
					systemctl status openvpn-client@n3guest
					ip addr
					"""
					
					// Write the OpenVPN configuration file
					sh """
					ls /
					ls /ansible

					cat ${ANSIBLE_INVENTORY}
					"""
					
					sh """
					sshpass -p ${PASSWORD} ansible-playbook -i ${ANSIBLE_INVENTORY} ${ANSIBLE_PLAYBOOK_FILE}  --user ${USERNAME} --ask-pass --extra-vars "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
					""", returnStatus: true
            }
        }
    }
    // Clean up workspace
    cleanWs()
}